package com.swipehire.swipehirebackend.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.Customizer;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.NoOpPasswordEncoder;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import java.security.Provider;@Configuration // Marks the class as a source of Spring configuration.@EnableWebSecurity // Enables Spring Security for configuring authentication and authorization.public class SecurityConfig {  @Autowired  private UserDetailsService userDetailsService;  @Bean  public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {    return http      .csrf(customizer -> customizer.disable()) // - disables CSRF protection (not needed for APIs).      .authorizeHttpRequests(request -> request        .requestMatchers("/register", "/login")        .permitAll()        .anyRequest().authenticated()) // - all requests require authentication.      .httpBasic(Customizer.withDefaults()) // - includes basic HTTP authentication (Authorization header).      .sessionManagement(session ->        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // - disables sessions, each access requires re-authorization (stateless).      .build(); // - completes the configuration and creates the SecurityFilterChain.  }  @Bean  public AuthenticationProvider authenticationProvider() {    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();    provider.setPasswordEncoder(new BCryptPasswordEncoder(12));    provider.setUserDetailsService(userDetailsService);    return provider;  }  @Bean  public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {    return config.getAuthenticationManager();  }  @Bean  public BCryptPasswordEncoder passwordEncoder() {    return new BCryptPasswordEncoder(12);  }}