package com.swipehire.swipehirebackend.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.config.Customizer;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.config.annotation.web.builders.HttpSecurity;@Configuration@EnableWebSecuritypublic class SecurityConfig {  @Bean  public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{    return http      .csrf(customizer -> customizer.disable()) // - disables CSRF protection (not needed for APIs).      .authorizeHttpRequests(request -> request.anyRequest().authenticated()) // - all requests require authentication.      .formLogin(Customizer.withDefaults()) // - includes a standard HTML login form.      .httpBasic(Customizer.withDefaults()) // - includes basic HTTP authentication (Authorization header).      .sessionManagement(session ->        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // - disables sessions, each access requires re-authorization (stateless).      .build(); // - completes the configuration and creates the SecurityFilterChain.  }  @Bean  public AuthenticationProvider authenticationProvider(){  }}